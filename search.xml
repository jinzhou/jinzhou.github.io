<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Hello World</title>
    <url>/2024/hello-world/</url>
    <content><![CDATA[<p>终于！我这个懒癌患者总算是把博客搭起来啦~</p>
<p>其实有这个想法已经有好几个年头了，可惜无奈工作太勤奋，闲暇时间又忙着打游戏，所以这个计划一直搁置着。</p>
<p>前段时间正好遇到被公司强制放假一周，才紧赶慢赶地把这个博客给捣鼓出来了，给自己搭建一个可以随时在线查阅的技术笔记，岂不美哉？</p>
<p><img src="/../images/2024/04/11/b953f7dd-c7e7-4c3e-9cc7-bd96cf7d6ab3.png" alt="王司徒都竖起了大拇指"></p>
<p>有时思想的火花在脑子里灵光一闪，比如顿悟了某个晦涩难懂的知识点，亦或是突然把几个知识点串连了起来，当时的心情无比喜悦，可过了几天这些知识很快就会被遗忘在记忆的角落，如同那串出门前怎么找也找不到的家门钥匙，甭提有多难受。</p>
<p>所以俗话说的好，好记性不如烂笔头，希望有了这个博客可以鞭策自己多写点东西吧。</p>
]]></content>
  </entry>
  <entry>
    <title>About me</title>
    <url>/2024/about-me/</url>
    <content><![CDATA[<p>你好，很高兴认识你，我是一名生活在悉尼的程序员，爱好主机游戏和手机游戏。</p>
<p>我喜欢小动物，喜欢宅在家，喜欢甜食和饮料，现在是一名6年级小学生的爸爸和两个布偶猫的铲屎官。</p>
<p>作为一个码农，工作到现在已经有10来个年头了，在这悠悠的时光里，见证了许多技术的迭代与消亡，自身也完成了从后台到全栈再到纯前端的转变。</p>
<p>刚把博客搭起来也不知道说些什么，以后再慢慢添加内容吧，溜了溜了~</p>
]]></content>
  </entry>
  <entry>
    <title>反直觉的iif</title>
    <url>/2024/%E5%8F%8D%E7%9B%B4%E8%A7%89%E7%9A%84iif/</url>
    <content><![CDATA[<p>今天一个同事问我，为啥我写的iif语句里的两个分支里的代码都会被执行。示例代码如下：</p>
<figure class="shiki javascript"><div class='codeblock'><div class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></div><div class="code"><pre class="shiki dracula"><code><span class="line"></span>
<span class="line"><span style="color: #FF79C6">import</span><span style="color: #F8F8F2"> { iif, of, pipe } </span><span style="color: #FF79C6">from</span><span style="color: #F8F8F2"> </span><span style="color: #E9F284">&#39;</span><span style="color: #F1FA8C">rxjs</span><span style="color: #E9F284">&#39;</span><span style="color: #F8F8F2">;</span></span>
<span class="line"><span style="color: #FF79C6">import</span><span style="color: #F8F8F2"> { mergeMap } </span><span style="color: #FF79C6">from</span><span style="color: #F8F8F2"> </span><span style="color: #E9F284">&#39;</span><span style="color: #F1FA8C">rxjs/operators</span><span style="color: #E9F284">&#39;</span><span style="color: #F8F8F2">;</span></span>
<span class="line"></span>
<span class="line"><span style="color: #FF79C6">const</span><span style="color: #F8F8F2"> source$ </span><span style="color: #FF79C6">=</span><span style="color: #F8F8F2"> </span><span style="color: #50FA7B">of</span><span style="color: #F8F8F2">(</span><span style="color: #E9F284">&#39;</span><span style="color: #F1FA8C">Hello</span><span style="color: #E9F284">&#39;</span><span style="color: #F8F8F2">);</span></span>
<span class="line"><span style="color: #FF79C6">const</span><span style="color: #F8F8F2"> </span><span style="color: #50FA7B">streamOne$</span><span style="color: #F8F8F2"> </span><span style="color: #FF79C6">=</span><span style="color: #F8F8F2"> () </span><span style="color: #FF79C6">=&gt;</span><span style="color: #F8F8F2"> {</span></span>
<span class="line"><span style="color: #F8F8F2">  console.</span><span style="color: #50FA7B">log</span><span style="color: #F8F8F2">(</span><span style="color: #E9F284">&#39;</span><span style="color: #F1FA8C">inside stream one</span><span style="color: #E9F284">&#39;</span><span style="color: #F8F8F2">);</span></span>
<span class="line"><span style="color: #F8F8F2">  </span><span style="color: #FF79C6">return</span><span style="color: #F8F8F2"> </span><span style="color: #50FA7B">of</span><span style="color: #F8F8F2">(</span><span style="color: #E9F284">&#39;</span><span style="color: #F1FA8C">One</span><span style="color: #E9F284">&#39;</span><span style="color: #F8F8F2">);</span></span>
<span class="line"><span style="color: #F8F8F2">};</span></span>
<span class="line"><span style="color: #FF79C6">const</span><span style="color: #F8F8F2"> </span><span style="color: #50FA7B">streamTwo$</span><span style="color: #F8F8F2"> </span><span style="color: #FF79C6">=</span><span style="color: #F8F8F2"> () </span><span style="color: #FF79C6">=&gt;</span><span style="color: #F8F8F2"> {</span></span>
<span class="line"><span style="color: #F8F8F2">  console.</span><span style="color: #50FA7B">log</span><span style="color: #F8F8F2">(</span><span style="color: #E9F284">&#39;</span><span style="color: #F1FA8C">inside stream two</span><span style="color: #E9F284">&#39;</span><span style="color: #F8F8F2">);</span></span>
<span class="line"><span style="color: #F8F8F2">  </span><span style="color: #FF79C6">return</span><span style="color: #F8F8F2"> </span><span style="color: #50FA7B">of</span><span style="color: #F8F8F2">(</span><span style="color: #E9F284">&#39;</span><span style="color: #F1FA8C">Two</span><span style="color: #E9F284">&#39;</span><span style="color: #F8F8F2">);</span></span>
<span class="line"><span style="color: #F8F8F2">};</span></span>
<span class="line"></span>
<span class="line"><span style="color: #F8F8F2">source$.</span><span style="color: #50FA7B">pipe</span><span style="color: #F8F8F2">(</span></span>
<span class="line"><span style="color: #F8F8F2">  </span><span style="color: #50FA7B">mergeMap</span><span style="color: #F8F8F2">(</span><span style="color: #FFB86C; font-style: italic">v</span><span style="color: #F8F8F2"> </span><span style="color: #FF79C6">=&gt;</span></span>
<span class="line"><span style="color: #F8F8F2">    </span><span style="color: #50FA7B">iif</span><span style="color: #F8F8F2">(</span></span>
<span class="line"><span style="color: #F8F8F2">      () </span><span style="color: #FF79C6">=&gt;</span><span style="color: #F8F8F2"> v </span><span style="color: #FF79C6">===</span><span style="color: #F8F8F2"> </span><span style="color: #E9F284">&#39;</span><span style="color: #F1FA8C">Hello</span><span style="color: #E9F284">&#39;</span><span style="color: #F8F8F2">,</span></span>
<span class="line"><span style="color: #F8F8F2">      </span><span style="color: #50FA7B">streamOne$</span><span style="color: #F8F8F2">(),</span></span>
<span class="line"><span style="color: #F8F8F2">      </span><span style="color: #50FA7B">streamTwo$</span><span style="color: #F8F8F2">()</span></span>
<span class="line"><span style="color: #F8F8F2">    )</span></span>
<span class="line"><span style="color: #F8F8F2">  )</span></span>
<span class="line"><span style="color: #F8F8F2">).</span><span style="color: #50FA7B">subscribe</span><span style="color: #F8F8F2">(console.log);</span></span></code></pre></div></div></figure>

<p>以上代码的输出如下：</p>
<figure class="shiki console"><div class='codeblock'><div class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div><div class="code"><pre class="shiki dracula"><code><span class="line"><span style="color: #F8F8F2">inside stream one</span></span>
<span class="line"><span style="color: #F8F8F2">inside stream two</span></span>
<span class="line"><span style="color: #F8F8F2">One</span></span></code></pre></div></div></figure>

<p>看起来两个分支里的console.log都被调用了，这是不是有些让人匪夷所思呢？碰巧这个问题我自己之前也遇到过，所以我依稀有些印象，那么接下来我就来复习一下。</p>
<p>iif的文档<a href="https://rxjs.dev/api/index/function/iif">在此</a></p>
<p>按理说iif操作符当中，只会有trueResult或是falseResult的其中一条语句被执行，为啥示例当中的两个分支的方法都会被调用呢？</p>
<p>其实错就错在，不能按照传统的理解if else语句的方法来理解iif。</p>
<p>看了iif的<a href="https://github.com/ReactiveX/rxjs/blob/7.8.1/src/internal/observable/iif.ts#L4-L85">源码</a>之后才会明白，其实trueResult和falseResult都是用来创建Observable的，它们本身当中的语句是同步执行的，所以它们当中的console.log语句都会被打印出来，而Observable本身是lazy的，只有在subscribe的时候才会返回trueResult或是falseResult当中的返回值。</p>
<p>换句话说，就是，iif的作用不是选择性的执行trueResult或者falseResult里的语句，而是选择性的订阅到trueResult或者falseResult所创建的Observable。因此，在创建两个分支的Observable的过程当中，两个分支的代码都会被执行。</p>
<p>“The role of iif is not to execute one path over the other, but to subscribe to one Observable or the other. That said, it will execute both code paths for setting up each Observable.”</p>
]]></content>
      <categories>
        <category>技术笔记</category>
      </categories>
      <tags>
        <tag>rxjs</tag>
      </tags>
  </entry>
  <entry>
    <title>rate limiting operators</title>
    <url>/2024/rate-limiting-operators/</url>
    <content><![CDATA[<p>rate limiting（速率限制），想必工作有些年头的老鸟，应该都不会陌生，尤其是debounce和throttle，更是前端程序员常常会遇到的情况。</p>
<p>rxjs不仅提供了debounce和throttle，还提供了audit和sample这两个比较少见的operator，以及它们4个相对应的debounceTime，throttleTime，auditTime以及sampleTime，那么接下来我就来理一理它们的概念和使用场景。</p>
<p>首先讲讲所有的rate limiting的操作符的通用使用场景，就是一定有2个Observable，一个source$负责生产数据，一个duration$负责产生时间间隔，这个时间间隔我们又拿它来控制数据的过滤筛选。</p>
<p>先来讲debounceTime，throttleTime，auditTime和sampleTime，因为它们相对好理解，只要搞懂了这4个，搞懂另外4个就不难了。</p>
<p>throttleTime(duration): 在指定的时间间隔内只发出第一个值，然后忽略在该时间间隔内发出的其他值，直到下一个时间间隔开始。</p>
<figure class="shiki javascript"><div class='codeblock'><div class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div><div class="code"><pre class="shiki dracula"><code><span class="line"><span style="color: #FF79C6">import</span><span style="color: #F8F8F2"> { interval } </span><span style="color: #FF79C6">from</span><span style="color: #F8F8F2"> </span><span style="color: #E9F284">&#39;</span><span style="color: #F1FA8C">rxjs</span><span style="color: #E9F284">&#39;</span><span style="color: #F8F8F2">;</span></span>
<span class="line"><span style="color: #FF79C6">import</span><span style="color: #F8F8F2"> { throttleTime } </span><span style="color: #FF79C6">from</span><span style="color: #F8F8F2"> </span><span style="color: #E9F284">&#39;</span><span style="color: #F1FA8C">rxjs/operators</span><span style="color: #E9F284">&#39;</span><span style="color: #F8F8F2">;</span></span>
<span class="line"></span>
<span class="line"><span style="color: #FF79C6">const</span><span style="color: #F8F8F2"> source$ </span><span style="color: #FF79C6">=</span><span style="color: #F8F8F2"> </span><span style="color: #50FA7B">interval</span><span style="color: #F8F8F2">(</span><span style="color: #BD93F9">1000</span><span style="color: #F8F8F2">);</span></span>
<span class="line"><span style="color: #FF79C6">const</span><span style="color: #F8F8F2"> output$ </span><span style="color: #FF79C6">=</span><span style="color: #F8F8F2"> source$.</span><span style="color: #50FA7B">pipe</span><span style="color: #F8F8F2">(</span><span style="color: #50FA7B">throttleTime</span><span style="color: #F8F8F2">(</span><span style="color: #BD93F9">1000</span><span style="color: #F8F8F2">));</span></span>
<span class="line"><span style="color: #F8F8F2">output$.</span><span style="color: #50FA7B">subscribe</span><span style="color: #F8F8F2">(console.log);</span></span></code></pre></div></div></figure>
<p>结果如下：</p>
<figure class="shiki console"><div class='codeblock'><div class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div><div class="code"><pre class="shiki dracula"><code><span class="line"><span style="color: #F8F8F2">0</span></span>
<span class="line"><span style="color: #F8F8F2">2</span></span>
<span class="line"><span style="color: #F8F8F2">4</span></span>
<span class="line"><span style="color: #F8F8F2">6</span></span>
<span class="line"><span style="color: #F8F8F2">8</span></span>
<span class="line"><span style="color: #F8F8F2">...</span></span></code></pre></div></div></figure>

<p>debounceTime(duration): 在指定的时间间隔后才发出最新值，如果在此期间内有新值，则重新计时。</p>
<figure class="shiki javascript"><div class='codeblock'><div class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div><div class="code"><pre class="shiki dracula"><code><span class="line"><span style="color: #FF79C6">import</span><span style="color: #F8F8F2"> { interval } </span><span style="color: #FF79C6">from</span><span style="color: #F8F8F2"> </span><span style="color: #E9F284">&#39;</span><span style="color: #F1FA8C">rxjs</span><span style="color: #E9F284">&#39;</span><span style="color: #F8F8F2">;</span></span>
<span class="line"><span style="color: #FF79C6">import</span><span style="color: #F8F8F2"> { debounceTime } </span><span style="color: #FF79C6">from</span><span style="color: #F8F8F2"> </span><span style="color: #E9F284">&#39;</span><span style="color: #F1FA8C">rxjs/operators</span><span style="color: #E9F284">&#39;</span><span style="color: #F8F8F2">;</span></span>
<span class="line"></span>
<span class="line"><span style="color: #FF79C6">const</span><span style="color: #F8F8F2"> source$ </span><span style="color: #FF79C6">=</span><span style="color: #F8F8F2"> </span><span style="color: #50FA7B">interval</span><span style="color: #F8F8F2">(</span><span style="color: #BD93F9">1000</span><span style="color: #F8F8F2">);</span></span>
<span class="line"><span style="color: #FF79C6">const</span><span style="color: #F8F8F2"> output$ </span><span style="color: #FF79C6">=</span><span style="color: #F8F8F2"> source$.</span><span style="color: #50FA7B">pipe</span><span style="color: #F8F8F2">(</span><span style="color: #50FA7B">debounceTime</span><span style="color: #F8F8F2">(</span><span style="color: #BD93F9">1000</span><span style="color: #F8F8F2">));</span></span>
<span class="line"><span style="color: #F8F8F2">output$.</span><span style="color: #50FA7B">subscribe</span><span style="color: #F8F8F2">(console.log);</span></span></code></pre></div></div></figure>
<p>我没法给出结果，<strong>因为每次我测试的结果都不一样</strong>，为什么会这样呢？？？我至今还没有答案。</p>
<p>根据定义debounceTime就是如果在duration之内，source$不再产生新的数据，才把最后的的值传递给下游，而示例代码每次duration刚到的时候，上游又产生了新的数据，于是又开始重新等待，如此往复。</p>
<p>我猜想，这个operator的使用场景并不适用于上游数据是有节奏性的产生的，而是突然爆发性的产生一堆，而后生产数据的节奏又慢下来，而我们想要在数据稳定了之后，再去获取最后的数据。搜索栏的使用场景就非常适用于debounceTime。</p>
<p>auditTime(duration)：在指定的时间间隔内只发出最新值，超过该时间间隔没有新值则发出最后一个值。</p>
<figure class="shiki javascript"><div class='codeblock'><div class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div><div class="code"><pre class="shiki dracula"><code><span class="line"><span style="color: #FF79C6">import</span><span style="color: #F8F8F2"> { interval } </span><span style="color: #FF79C6">from</span><span style="color: #F8F8F2"> </span><span style="color: #E9F284">&#39;</span><span style="color: #F1FA8C">rxjs</span><span style="color: #E9F284">&#39;</span><span style="color: #F8F8F2">;</span></span>
<span class="line"><span style="color: #FF79C6">import</span><span style="color: #F8F8F2"> { auditTime } </span><span style="color: #FF79C6">from</span><span style="color: #F8F8F2"> </span><span style="color: #E9F284">&#39;</span><span style="color: #F1FA8C">rxjs/operators</span><span style="color: #E9F284">&#39;</span><span style="color: #F8F8F2">;</span></span>
<span class="line"></span>
<span class="line"><span style="color: #FF79C6">const</span><span style="color: #F8F8F2"> source$ </span><span style="color: #FF79C6">=</span><span style="color: #F8F8F2"> </span><span style="color: #50FA7B">interval</span><span style="color: #F8F8F2">(</span><span style="color: #BD93F9">1000</span><span style="color: #F8F8F2">);</span></span>
<span class="line"><span style="color: #FF79C6">const</span><span style="color: #F8F8F2"> output$ </span><span style="color: #FF79C6">=</span><span style="color: #F8F8F2"> source$.</span><span style="color: #50FA7B">pipe</span><span style="color: #F8F8F2">(</span><span style="color: #50FA7B">auditTime</span><span style="color: #F8F8F2">(</span><span style="color: #BD93F9">1000</span><span style="color: #F8F8F2">));</span></span>
<span class="line"><span style="color: #F8F8F2">output$.</span><span style="color: #50FA7B">subscribe</span><span style="color: #F8F8F2">(console.log);</span></span></code></pre></div></div></figure>
<p>结果如下：</p>
<figure class="shiki console"><div class='codeblock'><div class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div><div class="code"><pre class="shiki dracula"><code><span class="line"><span style="color: #F8F8F2">1</span></span>
<span class="line"><span style="color: #F8F8F2">3</span></span>
<span class="line"><span style="color: #F8F8F2">5</span></span>
<span class="line"><span style="color: #F8F8F2">7</span></span>
<span class="line"><span style="color: #F8F8F2">9</span></span>
<span class="line"><span style="color: #F8F8F2">...</span></span></code></pre></div></div></figure>
<p>sampleTime(duration)：在指定的时间间隔内对上游数据进行采样，并在每个时间间隔结束时发出最新的取样值。</p>
<figure class="shiki javascript"><div class='codeblock'><div class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div><div class="code"><pre class="shiki dracula"><code><span class="line"><span style="color: #FF79C6">import</span><span style="color: #F8F8F2"> { interval } </span><span style="color: #FF79C6">from</span><span style="color: #F8F8F2"> </span><span style="color: #E9F284">&#39;</span><span style="color: #F1FA8C">rxjs</span><span style="color: #E9F284">&#39;</span><span style="color: #F8F8F2">;</span></span>
<span class="line"><span style="color: #FF79C6">import</span><span style="color: #F8F8F2"> { sampleTime } </span><span style="color: #FF79C6">from</span><span style="color: #F8F8F2"> </span><span style="color: #E9F284">&#39;</span><span style="color: #F1FA8C">rxjs/operators</span><span style="color: #E9F284">&#39;</span><span style="color: #F8F8F2">;</span></span>
<span class="line"></span>
<span class="line"><span style="color: #FF79C6">const</span><span style="color: #F8F8F2"> source$ </span><span style="color: #FF79C6">=</span><span style="color: #F8F8F2"> </span><span style="color: #50FA7B">interval</span><span style="color: #F8F8F2">(</span><span style="color: #BD93F9">1000</span><span style="color: #F8F8F2">);</span></span>
<span class="line"><span style="color: #FF79C6">const</span><span style="color: #F8F8F2"> output$ </span><span style="color: #FF79C6">=</span><span style="color: #F8F8F2"> source$.</span><span style="color: #50FA7B">pipe</span><span style="color: #F8F8F2">(</span><span style="color: #50FA7B">sampleTime</span><span style="color: #F8F8F2">(</span><span style="color: #BD93F9">1000</span><span style="color: #F8F8F2">));</span></span>
<span class="line"><span style="color: #F8F8F2">output$.</span><span style="color: #50FA7B">subscribe</span><span style="color: #F8F8F2">(console.log);</span></span></code></pre></div></div></figure>
<p>结果如下：</p>
<figure class="shiki console"><div class='codeblock'><div class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div><div class="code"><pre class="shiki dracula"><code><span class="line"><span style="color: #F8F8F2">0</span></span>
<span class="line"><span style="color: #F8F8F2">1</span></span>
<span class="line"><span style="color: #F8F8F2">2</span></span>
<span class="line"><span style="color: #F8F8F2">3</span></span>
<span class="line"><span style="color: #F8F8F2">4</span></span>
<span class="line"><span style="color: #F8F8F2">...</span></span></code></pre></div></div></figure>
<p>可以发现sampleTime的duration如果和上游生产数据的速率一致，则没有太大的使用意义，只有当duration大于上游的生产速率时才有用：</p>
<figure class="shiki javascript"><div class='codeblock'><div class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div><div class="code"><pre class="shiki dracula"><code><span class="line"><span style="color: #FF79C6">import</span><span style="color: #F8F8F2"> { interval } </span><span style="color: #FF79C6">from</span><span style="color: #F8F8F2"> </span><span style="color: #E9F284">&#39;</span><span style="color: #F1FA8C">rxjs</span><span style="color: #E9F284">&#39;</span><span style="color: #F8F8F2">;</span></span>
<span class="line"><span style="color: #FF79C6">import</span><span style="color: #F8F8F2"> { sampleTime } </span><span style="color: #FF79C6">from</span><span style="color: #F8F8F2"> </span><span style="color: #E9F284">&#39;</span><span style="color: #F1FA8C">rxjs/operators</span><span style="color: #E9F284">&#39;</span><span style="color: #F8F8F2">;</span></span>
<span class="line"></span>
<span class="line"><span style="color: #FF79C6">const</span><span style="color: #F8F8F2"> source$ </span><span style="color: #FF79C6">=</span><span style="color: #F8F8F2"> </span><span style="color: #50FA7B">interval</span><span style="color: #F8F8F2">(</span><span style="color: #BD93F9">1000</span><span style="color: #F8F8F2">);</span></span>
<span class="line"><span style="color: #FF79C6">const</span><span style="color: #F8F8F2"> output$ </span><span style="color: #FF79C6">=</span><span style="color: #F8F8F2"> source$.</span><span style="color: #50FA7B">pipe</span><span style="color: #F8F8F2">(</span><span style="color: #50FA7B">sampleTime</span><span style="color: #F8F8F2">(</span><span style="color: #BD93F9">3000</span><span style="color: #F8F8F2">));</span></span>
<span class="line"><span style="color: #F8F8F2">output$.</span><span style="color: #50FA7B">subscribe</span><span style="color: #F8F8F2">(console.log);</span></span></code></pre></div></div></figure>
<p>结果如下：</p>
<figure class="shiki console"><div class='codeblock'><div class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div><div class="code"><pre class="shiki dracula"><code><span class="line"><span style="color: #F8F8F2">2</span></span>
<span class="line"><span style="color: #F8F8F2">5</span></span>
<span class="line"><span style="color: #F8F8F2">8</span></span>
<span class="line"><span style="color: #F8F8F2">11</span></span>
<span class="line"><span style="color: #F8F8F2">14</span></span>
<span class="line"><span style="color: #F8F8F2">...</span></span></code></pre></div></div></figure>

<p>综上，以下是每个操作符的说明以及其适用场景：</p>
<table>
<thead>
<tr>
<th>操作符</th>
<th>说明</th>
<th>适用场景</th>
</tr>
</thead>
<tbody><tr>
<td>throttleTime</td>
<td>在指定的时间间隔内只发出第一个值，然后忽略在该时间间隔内发出的其他值，直到下一个时间间隔开始。</td>
<td>需要在特定时间间隔内处理事件，比如防止按钮重复点击，或者限制用户连续输入的频率。</td>
</tr>
<tr>
<td>debounceTime</td>
<td>在指定的时间间隔后才发出最新值，如果在此期间内有新值，则重新计时。</td>
<td>用于处理频繁的事件，比如输入框输入时的搜索请求，只在用户停止输入一段时间后才发出请求。</td>
</tr>
<tr>
<td>auditTime</td>
<td>在指定的时间间隔内只发出最新值，超过该时间间隔没有新值则发出最后一个值。</td>
<td>当你只关心事件在一段时间内的情况，而不关心中间值，比如在点击事件中只关心每隔一段时间内的最新点击。</td>
</tr>
<tr>
<td>sampleTime</td>
<td>在指定的时间间隔内从上游中取样，并在每个时间间隔结束时发出最新的取样值。</td>
<td>当你需要以固定的时间间隔获取上游的最新值时，比如每隔一段时间对数据进行统计或者更新状态。</td>
</tr>
</tbody></table>
]]></content>
      <categories>
        <category>技术笔记</category>
      </categories>
      <tags>
        <tag>rxjs</tag>
      </tags>
  </entry>
</search>
